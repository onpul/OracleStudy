--▶ 오라클은 RDBMS -> 관계형 데이터베이스 관리 시스템
-- 관계형 데이터베이스 관리 시스템의 양대산맥은 오라클, MSSQL

--▶ 오라클 최고 관리자 계정은 SYS

--▶ 오라클 구조 잡기
-- 오라클에서 중요한 개념은 TABLE --> 표라고 생각하자
-- DATABASE   : 사물함
-- TABLESPACE : 테이블을 저장할 수 있는 공간 --> 사물함 속 서랍 
-- TABLE      : 서랍 속 파일(표)

-- 테이블     : 가입 회원이라는 표
-- 테이블 명  : '가입 회원'이라는 이름
-- 컬럼 명    : 회원 번호, 회원명, 전화번호 등의 항목명
-- 레코드     : 데이터의 건 수

--------------------------------------------------------------------------------

--▶ 명령어 정리

-- 변경(수정)       구조적 - ALTER
--                  데이터 - UPDATE -> 커밋 필요

-- 제거(삭제)       구조적 - DROP
--                  데이터 - DELETE -> 커밋 필요

-- 생성(입력)       구조적 - CREATE
--                  데이터 - INSERT -> 커밋 필요

--▶ DDL(데이터 정의어)
-- 데이터의 구조를 정의하기 위한 명령어
-- ALTER, DROP, CREATE

--▶ DML(데이터 조작어)
-- 데이터 조회 및 변형을 위한 명령어
-- SELECT, UPDATE, DELETE, INSERT

--▶ DCL(데이터 제어어)
-- GRANT, REVOKE

--------------------------------------------------------------------------------

--▶ DUAL TABLE
-- 모든 오라클 데이터베이스 설치본에 기본으로 존재하는 한 열로 이루어진 특별한 (임시) 테이블
-- SYSDATE, USER와 같은 '의사컬럼' 선택에 사용하는 것이 적절
-- 'X' 값을 포함하는 DUMMY(더미)라 불리는 하나의 VARCHAR2(1)열을 가지고 있음

--▶ '문자열'
-- 문자열은 '' 작은 따옴표로 묶어 주기
-- '짱구' + '철수' --> X / 숫자가 아니면 덧셈 연산이 유효하지 않음

--------------------------------------------------------------------------------

--▶ SELECT문의 처리 순서
/*
SELECT 컬럼명     -- ⑤     -- 필수, 기본 / 여러 개의 컬럼들 중에 요 컬럼이야
FROM 테이블명     -- ①     -- 필수, 기본 / 여러 개의 테이블들 중에 요 놈이야
WHERE 조건절      -- ②     --              선택한 컬럼 중에서 경기도에 사는 사람만
GROUP BY 절       -- ③     --              묶는 거 / 안경 쓴, 안경 안 쓴 / 남자, 여자
HAVING 조건절     -- ④     --              묶인 것들에 대한 조건 / 인천, 경기, 서울로 묶고 충북 위로만 조건 제시
ORDER BY 절       -- ⑥     --              정렬 / 키순, 번호순 등
*/
-- ★암 기 하 기★
-- FROM / WHERE / GROUP BY / HAVING / SELECT / ORDER BY
-- 프롬 / 웨얼 / 그룹 바이 / 해빙 / 셀렉트 / 올더 바이

--------------------------------------------------------------------------------

--▶ 오라클의 주요 자료형(DATA TYPE)
/*
※ ORACLE 은 숫자 표현 타입이 한 가지로 통일되어 있다.
   
   1. 숫자형 NUMBER        → -10의 38승-1 ~ 10의 38승
             NUMBER(3)     → -999 ~ 999
             NUMBER(4)     → -9999 ~ 9999
             NUMBER(4, 1)  → -999.9 ~ 999.9
             
             
※ ORACLE 의 문자 표현 타입   
   
    2. 문자형 CHAR          → 고정형 크기
              CHAR(10)      → 무조건 10Byte 소모
              CHAR(10)      ← '강의실'        6Byte 이지만 10Byte 를 소모
              CHAR(10)      ← '졸린한충희'   10Byte
              CHAR(10)      ← '곧잔다김민성' 10Byte 를 초과하므로 입력 불가
              
              VARCHAR2      → 가변형 크기
              VARCHAR2(10)  → 담긴 데이터에 따라 크기가 변화
              VARCHAR2(10)  ← '김정용'        6Byte 
              VARCHAR2(10)  ← '멀다김정용'   10Byte
              VARCHAR2(10)  ← '가까이김정용' 10Byte 를 초과하므로 입력 불가
              
              NCHAR         → 유니코드기반 고정형 크기
                               ------------
                                  글자수       
              NCHAR(10)     → 10 글자 
              
              NVARCHAR2     → 유니코드기반 가변형 크기
                               ------------
                                  글자수
              NVARCHAR2(10) → 10 글자
     
    3. 날짜형 DATE
*/

--------------------------------------------------------------------------------

--▶ 데이터 조회
-- 오라클에서 논리연산자 OR은 OR
-- WHERE DEPTNO = 20 OR DEPTNO = 30
-- WHERE DEPTNO IN (20, 30) --> IN 연산자 활용

-- NULL값 조회는
-- IS NULL
-- IS NOT NULL

-- 연산자
-- !=, ^=, <> --> 같지 않다!

--------------------------------------------------------------------------------

--▶ NVL()
-- 첫 번째 파라미터 값이 NULL 이면, 두 번째 파라미터 값을 반환한다.
-- 첫 번째 파라미터 값이 NULL 이 아니면, 그 값을 그대로 반환한다.

--▶ NVL2()
-- 첫 번째 파라미터 값이 NULL이 아닌 경우, 두 번째 파라미터 값을 반환하고
-- 첫 번째 파라미터 값이 NULL인 경우, 세 번째 파라미터 값을 반환한다.

--▶ COALESCE()
-- 매개변수 제한이 없는 형태로 인지하고 활용한다.
-- 맨 앞에 있는 매개변수부터 차례로 NULL 인지 아닌지 확인하여
-- NULL 이 아닐 경우 반환하고, 
-- NULL인 경우에는 그 다음 매개변수 값을 반환한다.
-- NVL() 이나 NVL2() 와 비교하여
-- 모 ~~~ 든 경우의 수를 고려할 수 있다는 특징을 갖는다.

--------------------------------------------------------------------------------

--▶ 컬럼과 컬럼의 연결(결합)
-- 『||』

--------------------------------------------------------------------------------

--▶ TO_DATE()
-- 오라클의 날짜 변환 함수

--※ 오라클에서는 날짜 데이터에 대한 크기 비교가 가능하다.
-- 오라클에서는 날짜 데이터에 대한 크기 비교 시 
-- 과거보다 미래를 더 큰 값으로 간주한다.

--▶ BETWEEN ⓐ AND ⓑ
--※ BETWEEN ⓐ AND ⓑ 는 날짜형, 숫자형, 문자형 데이터 모두에 적용된다.
-- 단, 문자형일 경우 아스키코드 순서를 따르기 때문에 (사전식 배열)
-- 대문자가 앞쪽에 위치하고 소문자가 뒤쪽에 위치한다.
-- 또한, BETWEEN ⓐ AND ⓑ는 해당 구문이 수행되는 시점에서
-- 오라클 내부적으로는 부등호 연산자의 형태로 바뀌어 연산 처리된다.

-------------------------------------------------------------------------------

-- WHERE JOB = 'SALESMAN' OR JOB = 'CLERK';
-- WHERE JOB IN('SALESMAN', 'CLERK');
-- WHERE JOB = ANY ('SALESMAN', 'CLERK');

--※ 위의 3가지 유형의 쿼리문은 모두 같은 결과를 반환한다.
-- 하지만, 맨 위의 쿼리문(OR) 이 가장 빠르게 처리된다.
-- 물론 메모리에 대한 내용이 아니라 CPU 처리에 대한 내용이므로
-- 이 부분까지 감안하여 쿼리문을 구성하게 되는 경우는 많지 않다.
-- → 『IN』 과 『=ANY』는 같은 연산자 효과를 가진다.
-- 이들 모두는 내부적으로 『OR』 구조로 변경되어 연산 처리된다.

-------------------------------------------------------------------------------

-- WHERE SANAME = '최문정';
-- WHERE SANAME LIKE '최문정';
--※ LIKE : 동사 → 좋아하다
--          부사 → ~와 같이, ~처럼    CHECK~!!!

--※ WHILD CARD(CHARACTER) → 『%』
-- 『LIKE』와 함께 사용되는 『%』는 모든 글자를 의미하고
-- 『LIKE』와 함께 사용되는 『_』는 아무 글자 한 개를 의미한다.

-------------------------------------------------------------------------------

--▶ ESCAPE 문법
-- WHERE BIGO LIKE '%99.99\%%' ESCAPE '\';
--※ ESCAPE로 정한 문자의 다음 한 글자를 와일드카드에서 탈출시켜라...
-- 일반적으로 사용 빈도가 낮은 특수문자(특수기호)를 사용한다.

-------------------------------------------------------------------------------

--▶ ORDER BY 절
/*
-- 정렬 기준 : DEPTNO
ORDER BY DEPTNO ASC;    -- ASC     → 정렬 유형 : 오름차순
ORDER BY DEPTNO DESC;   -- DESC    → 정렬 유형 : 내림차순 → 생략 불가~!!!
*/

-- ORDER BY 2, 4;  -- DEPTNO, SAL 기준 ... ASC / SELECT한 순서

-------------------------------------------------------------------------------

--▶ CONCAT()
-- 문자열을 결합하는 기능을 가진 함수 CONCAT()
-- 오로지 2개의 문자열만 결합시켜줄 수 있다.
-- CONCAT()은 문자열과 문자열을 결합시켜 주는 함수이지만
-- 내부적으로 숫자나 날짜를 문자로 바꾸어주는 과정이 포함되어 있다.

-------------------------------------------------------------------------------

--▶ SUBSTR() 추출 갯수 기반 / SUBSTRB() 추출 바이트 기반
--> 문자열을 추출하는 기능을 가진 함수
-- 첫 번째 파라미터 값은 대상 문자열(추출의 대상, TARGET)
-- 두 번째 파라미터 값은 추출을 시작하는 위치(인덱스는 1부터 시작)
-- 세 번째 파라미터 값은 추출할 문자열의 갯수(생략 시... 끝까지)

--▶ LENGTH() 글자 수 / LENGTHB() 바이트 수

--▶ INSTR()
--> 첫 번째 파라미터 값에 해당하는 문자열에서... (대상 문자열, TARGET)
-- 두 번째 파라미터 값을 통해 넘겨준 문자열이 등장하는 위치를 찾아라~
-- 세 번째 파라미터 값은 찾기 시작하는(스캔을 시작하는) 위치(→ 음수일 경우 뒤에서부터 스캔)
-- 네 번째 파라미터 값은 몇 번째 등장하는 값을 찾을 것인지에 대한 설정(→ 1은 생략 가능)

--▶ REVERSE()
--> 대상 문자열을 거꾸로 반환한다. (단, 한글은 제외)

--▶ LPAD() --> LEFT
--> Byte를 확보하여 왼쪽부터 문자로 채우는 기능을 가진 함수
/*
SELECT 'ORACLE' "COL1"
     , LPAD('ORACLE', 10, '*') "COL2" --> 두 번째 파라미터부터 보자!
FROM DUAL;
*/
--==>>  ORACLE	****ORACLE
--> ① 10Byte 공간을 확보한다.                  → 두 번째 파라미터 값에 의해...
--  ② 확보한 공간에 'ORACLE' 문자열을 담는다.  → 첫 번째 파라미터 값에 의해...
--  ③ 남아있는 Byte 공간을 『왼쪽』부터 세 번째 파라미터 값으로 채운다.
--  ④ 이렇게 구성된 최종 결과값을 반환한다.

--▶ RPAD() --> RIGHT
--> Byte를 확보하여 오른쪽부터 문자로 채우는 기능을 가진 함수

--▶ LTRIM()
--> 첫 번째 파라미터 값에 해당하는 문자열을 대상으로
-- 왼쪽부터 연속적으로 등장하는 두 번째 파라미터 값에서 지정한 글자와
-- 같은 글자가 등장할 경우 이를 제거한 결과값을 반환한다.
-- 단, 완성형으로 처리되지 않는다.

--▶ TRANSLATE()
--> 1:1로 바꿔준다.

-------------------------------------------------------------------------------

